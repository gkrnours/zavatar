{
  "name": "logly",
  "description": "A minimal logging utility to support verbose and debug modes",
  "version": "1.3.0",
  "author": {
    "name": "Tristan Slominski",
    "email": "tristan.slominski@gmail.com",
    "url": "http://github.com/tristanls"
  },
  "contributors": [
    {
      "name": "Andrew Smith",
      "url": "http://github.com/andrew-smith"
    },
    {
      "name": "Bruno Morency",
      "email": "bruno@morency.me",
      "url": "http://github.com/brunomorency"
    }
  ],
  "bugs": {
    "url": "http://github.com/tristanls/logly/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/tristanls/logly/blob/master/LICENSE"
    }
  ],
  "repositories": [
    {
      "type": "git",
      "url": "http://github.com/tristanls/logly.git"
    }
  ],
  "dependencies": {},
  "homepage": "https://github.com/tristanls/logly",
  "main": "./logly.js",
  "engines": {
    "node": ">=v0.4.8"
  },
  "readme": "logly\n====\n\n`logly` is a small logging framework in the `nodejs` ecosystem that also allows one to set `debug` or `verbose` logging modes. \nIt is useful to replace comments that describe what the code is doing, especially in `debug` mode.\n\n## Usage\n\n```javascript\nvar logly = require( 'logly' );\n    \nlogly.name( 'myapp' );\nlogly.mode( 'debug' );\n\nlogly.debug( 'debug log' );\n// stdout: myapp[debug]: debug log\n\nlogly.verbose( 'verbose log' );\n// stdout: myapp[verbose]: verbose log\n\nlogly.log( 'standard log' );\n// stdout: myapp: standard log\n\nlogly.warn( 'warning log' );\n// stderr: myapp[warn]: warning log\n\nlogly.error( 'error log' );\n// stderr: myapp[error]: error log\n\nlogly.stdout( 'stdout log' );\n// stdout: stdout log\n// *above does not include 'myapp'\n\nlogly.stderr( 'stderr log' );\n// stderr: stderr log\n// *above does not include 'myapp'\n```\n\n### functions as input\n\n`logly` also accepts functions as input; this is primarily to conditionally produce a debug output of complex something if in `debug` mode, for example:\n\n```javascript\nvar options = { debug: true, output: \"some.file\" }\n// dump options in debug mode\nlogly.debug( function() {\n  for ( var i = 0; i < options.length; i++ ) {\n    logly.debug( '[OPTION] ' + option + \": \" + options[ option ] );\n  }\n});\n// stdout: myapp[debug]: [OPTION] debug: true\n// stdout: myapp[debug]: [OPTION] output: some.file\n```\n\n## Options\n\n### color/colour\n\nIf you want color then you can enable it (by default color is disabled):\n\n```javascript\nlogly.options( { color : true } );\n```\n\nYou can also use `color` or `colour` functions (maintained for backward compatibility):\n\n```javascript\nlogly.color(true);\nlogly.colour(true);\n```\n\n### date\n\nYou can include a date prefix as well:\n\n```javascript\nlogly.options( { date : true } );\nlogly.log( 'with date' );\n// stdout: Wed Aug 22 2012 21:22:52 GMT-0500 (CDT) myapp: with date\n```\n\n[ISO8601](http://en.wikipedia.org/wiki/ISO_8601) format is also available:\n\n```javascript\nlogly.options( { date : 'iso' } ); // or 'ISO8601', 'iso8601', 'ISO'\nlogly.log( 'with iso date' );\n// stdout: 2012-08-23T02:26:14.841Z myapp: with iso date\n```\n\n### `options` object\n\nYou can pass in the above options all together:\n\n```javascript\nlogly.options( { colour : true, date : 'iso' } );\n```",
  "readmeFilename": "README.md",
  "_id": "logly@1.3.0",
  "dist": {
    "shasum": "d6e6621982ef6102f0136dc460879a9528b9609a"
  },
  "_from": "logly@1.3.x"
}
